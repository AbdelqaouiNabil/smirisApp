version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: germansphere-db
    environment:
      POSTGRES_DB: germansphere_db
      POSTGRES_USER: germansphere_user
      POSTGRES_PASSWORD: germansphere_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - germansphere-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U germansphere_user -d germansphere_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: germansphere-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://germansphere_user:germansphere_password@database:5432/germansphere_db
      JWT_SECRET: development_jwt_secret_key_not_for_production
      STRIPE_SECRET_KEY: sk_test_development_key
      PAYPAL_CLIENT_SECRET: development_paypal_secret
    ports:
      - "5000:5000"
    networks:
      - germansphere-network
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./server/src:/app/src
      - ./server/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: germansphere-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_STRIPE_PUBLIC_KEY: pk_test_development_key
      REACT_APP_PAYPAL_CLIENT_ID: development_paypal_client_id
    ports:
      - "3000:3000"
    networks:
      - germansphere-network
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - backend

  # Redis for Sessions and Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: germansphere-redis
    ports:
      - "6379:6379"
    networks:
      - germansphere-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: germansphere-nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - germansphere-network
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    profiles:
      - production

networks:
  germansphere-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
